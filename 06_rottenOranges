class Triple{
    int first;
    int second;
    int third;
    public Triple(int first, int second, int third){
        this.first=first;
        this.second=second;
        this.third=third;
    }
}
class Solution
{
    
    public int orangesRotting(int[][] grid)
    {
        int n= grid.length;
        int m= grid[0].length;
        int countFresh=0;
        int[][] vis= new int[n][m];
        Queue<Triple> q= new LinkedList<>();
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j]==1) countFresh++;
                if(grid[i][j]==2){
                    q.offer(new Triple(i,j,0));
                    vis[i][j]=2;
                }
                else{
                    vis[i][j]=0;
                }
            }
        }
        
        int time=0;
        int[] drow={-1,0,1,0};
        int[] dcol={0,1,0,-1};
        int count=0;
        
        while(!q.isEmpty()){
            int r=q.peek().first;
            int c=q.peek().second;
            int t=q.peek().third;
            time= Math.max(time,t);
            q.poll();
            for(int i=0; i<4; i++){
                int nr=r+drow[i];
                int nc=c+dcol[i];
                if(nr>=0 && nr<n && nc>=0 && nc<m && vis[nr][nc]==0 && grid[nr][nc]==1){
                    q.offer(new Triple(nr,nc,t+1));
                    vis[nr][nc]=2;
                    count++;
                    
                }
            }
        }
        // check
        if(countFresh!=count) return -1;
        return time;
        
    }
}
